---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wuxin.
--- DateTime: 2019-11-14 18:12
---

local redismod = require "resty.redis"
local bs = require("ngx.base64")

local kong = kong

local ejusso = {}
ejusso.VERSION = "1.0"
ejusso.PRIORITY=140



local function shouldSkip(url, conf)
    if url == conf.redirectUrl then
        return true
    end

    -- 正则表达式匹配的
    if not conf.skipPattern then
        return false
    end

    local found =  ngx.re.find(url,conf.skipPattern,"jio")  -- 没找到返回nil
    kong.log.err("url: ", url, " pattern: " , conf.skipPattern, " found: ",found)

    return found
end

local function closeRedis(redis)
    redis:set_keepalive(2 * 60 * 1000, 10) -- 单位 ms
end

local function checkAndRenewToken(token, conf)
    -- 连接redis
    local redis = redismod:new()
    redis:set_timeouts(conf.redisTimeout, conf.redisTimeout, conf.redisTimeout)

    local ok, err = redis:connect(conf.redisHost, conf.redisPort)
    if not ok then
        kong.log.err("failed to connect redis: ", err)
        return false
    end

    -- 检查是否存在，不存在返回false
    local res, err = redis:get(conf.tokenPrefix .. token)
    kong.log.err(token, res)

    if not res or res == ngx.null then
        kong.log.err(token, " 该用户会话超时或未登录 ", err)
        closeRedis(redis)
        return false
    end

    -- 刷新token的存在时间,单位秒
    local ok, err = redis:set(conf.tokenPrefix .. token, res, "EX",conf.renewTime)
    if not ok then
        kong.log.err("failed to set : ", token, err)
    end

    closeRedis(redis)
    return true
end



function ejusso:access(conf)
    -- 如果其它插件设置了这个标志，则表示无需再作任何处理
    if ngx.ctx.eju_dont_do_anything then
        return
    end

    -- 当前URL是否不需要检查
    if shouldSkip(ngx.var.request_uri, conf) then
        return
    end

    -- 检查是否有cookies
    local cookie_name = conf.cookiesName
    local token = ngx.var["cookie_"..cookie_name]
    if not token or token == "" or not checkAndRenewToken(token, conf) then
        local url = ngx.var.scheme .. "://" .. ngx.var.http_host .. ngx.var.request_uri
        ngx.redirect(conf.redirectUrl .. ngx.escape_uri(url))
    end


end



return ejusso